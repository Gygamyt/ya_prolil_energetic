// scripts/better-split.ts
import mammoth from 'mammoth';
import { writeFile } from 'fs/promises';

(async () => {
    console.log('üìÑ Reading Word document...');
    const { value } = await mammoth.extractRawText({ path: '../data/salesforce-requests.docx' });

    // ‚úÖ –ò—â–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    let pages: string[] = [];

    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ–ª–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π (–Ω–µ –ø—Ä–æ—Å—Ç–æ QA, –∞ —Ü–µ–ª—ã–µ —Ä–æ–ª–∏)
    const jobTitlePatterns = [
        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–æ–ª–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        /(?=^[\w\s‚Äì\-()]+(?:QA|Quality Assurance)[\w\s‚Äì\-()]*(?:Engineer|Automation|Analyst|Tester|Specialist)[\w\s‚Äì\-()]*$)/m,
        // –†—É—Å—Å–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        /(?=^\d+\.\s*–ò–Ω–¥—É—Å—Ç—Ä–∏—è\s*–ø—Ä–æ–µ–∫—Ç–∞)/m,
        // CV –±–ª–æ–∫–∏ (–º—É—Å–æ—Ä, –Ω–æ —Ç–æ–∂–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
        /(?=^CV\s*-\s*[\w\s-]+\s*-)/m
    ];

    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (const pattern of jobTitlePatterns) {
        const splits = value.split(pattern);
        if (splits.length > pages.length) {
            pages = splits;
            console.log(`üìã Pattern found ${splits.length} sections`);
        }
    }

    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    if (pages.length < 3) {
        pages = value.split(/(?=(?:Senior|Mid[- ]?Level|Junior)?\s*QA[\s\w]*(?:Engineer|Automation|Analyst)(?:\s*[‚Äì\-]\s*[\w\s().]+)?(?:\s*\([\w\s]+\))?$)/m);
    }

    console.log(`üìä Found ${pages.length} potential job postings`);

    const log: string[] = ['#\ttitle\ttype\tlength\thas_requirements'];

    pages.forEach((page, i) => {
        const trimmed = page.trim();
        if (!trimmed || trimmed.length < 50) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ

        const lines = trimmed.split('\n').map(l => l.trim()).filter(Boolean);
        const title = lines[0] || '';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        const hasStructured = /^\d+\.\s*(?:–ò–Ω–¥—É—Å—Ç—Ä–∏—è|–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)/m.test(page);
        const hasEnglishSections = /(Responsibilities|Requirements|Tech Stack|Project Context):/i.test(page);
        const hasRussianFields = /(–°–µ–π–ª—Å –º–µ–Ω–µ–¥–∂–µ—Ä|–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä|–£—Ä–æ–≤–µ–Ω—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)/i.test(page);
        const isCV = /^CV\s*-/.test(title);
        const hasRequirements = /(Requirements|–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è|Experience|years|–æ–ø—ã—Ç)/i.test(page);

        let type = 'unknown';
        if (isCV) type = 'cv-link';
        else if (hasStructured && hasRussianFields) type = 'ru-structured';
        else if (hasEnglishSections && hasRussianFields) type = 'mixed';
        else if (hasEnglishSections) type = 'en-job';
        else if (hasStructured) type = 'ru-partial';

        // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∑–∞–ø–∏—Å–∏
        if ((type === 'en-job' || type === 'mixed' || type === 'ru-structured') && trimmed.length > 200) {
            log.push([
                i + 1,
                title.slice(0, 80).replace(/\t/g, ' '),
                type,
                trimmed.length,
                hasRequirements ? 'yes' : 'no'
            ].join('\t'));
        }
    });

    await writeFile('job-pages.tsv', log.join('\n'));
    console.log(`‚úÖ Analysis completed: ${log.length - 1} real job postings ‚Üí job-pages.tsv`);

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é
    console.log('\nüìã Real job postings preview:');
    log.slice(0, 10).forEach(line => console.log(line));
})();
