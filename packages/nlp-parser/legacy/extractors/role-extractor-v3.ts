interface RoleExtractionConfig {
    expectedRoleTypes?: RoleType[];
    confidence?: number;
    debug?: boolean;
}

interface RoleExtractionResult {
    role: string;
    roleType: RoleType;
    confidence: number;
    source: string;
    method: string;
}

enum RoleType {
    QA_AUTOMATION = 'qa_automation',
    QA_MANUAL = 'qa_manual',
    QA_GENERAL = 'qa_general',
    QA_LEAD = 'qa_lead',
    QA_SENIOR = 'qa_senior',
    QA_FULLSTACK = 'qa_fullstack',
    QA_MOBILE = 'qa_mobile',
    SDET = 'sdet',
    TEST_ENGINEER = 'test_engineer'
}

export class RoleExtractorV3 {

    /**
     * –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–∏–ø—ã —Ä–æ–ª–µ–π - —á—Ç–æ –º—ã –∏—â–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    private readonly defaultRoleTypes: RoleType[] = [
        RoleType.QA_AUTOMATION,
        RoleType.QA_MANUAL,
        RoleType.QA_GENERAL,
        RoleType.QA_LEAD,
        RoleType.QA_SENIOR,
        RoleType.QA_FULLSTACK,
        RoleType.QA_MOBILE,
        RoleType.SDET,
        RoleType.TEST_ENGINEER
    ];

    /**
     * Mapping: RoleType ‚Üí –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π
     */
    private readonly roleTypeMapping: Record<RoleType, string[]> = {
        [RoleType.QA_AUTOMATION]: [
            'QA Automation Engineer',
            'QA Automation',
            'Automation QA Engineer',
            'Test Automation Engineer',
            'AQA Engineer'
        ],
        [RoleType.QA_MANUAL]: [
            'Manual QA Engineer',
            'Manual QA Tester',
            'Manual Tester',
            'QA Manual Engineer',
            'Manual QA'
        ],
        [RoleType.QA_GENERAL]: [
            'QA Engineer',
            'Quality Assurance Engineer',
            'QA Tester',
            'Quality Engineer'
        ],
        [RoleType.QA_LEAD]: [
            'Lead QA Engineer',
            'QA Lead',
            'Lead QA Automation Engineer',
            'QA Team Lead'
        ],
        [RoleType.QA_SENIOR]: [
            'Senior QA Engineer',
            'Senior QA Automation Engineer',
            'Senior Manual QA Engineer',
            'Senior QA'
        ],
        [RoleType.QA_FULLSTACK]: [
            'Fullstack QA Engineer',
            'QA Engineer Fullstack',
            'Full Stack QA'
        ],
        [RoleType.QA_MOBILE]: [
            'Mobile QA Tester',
            'Mobile App Test Automation Engineer',
            'Mobile QA Engineer'
        ],
        [RoleType.SDET]: [
            'SDET',
            'Software Development Engineer in Test'
        ],
        [RoleType.TEST_ENGINEER]: [
            'Test Engineer',
            'Testing Engineer',
            'Software Test Engineer'
        ]
    };

    /**
     * –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–æ–ª–∏
     */
    private readonly rolePatterns: Record<RoleType, RegExp[]> = {
        [RoleType.QA_AUTOMATION]: [
            /\b(?:QA|Quality\s+Assurance)\s+Automation\s+Engineer\b/i,
            /\bAutomation\s+QA\s+Engineer\b/i,
            /\bTest\s+Automation\s+Engineer\b/i,
            /\bAQA\s+Engineer\b/i
        ],
        [RoleType.QA_MANUAL]: [
            /\bManual\s+QA\s*(?:Engineer|Tester)\b/i,
            /\bQA\s+Manual\s*(?:Engineer|Tester)\b/i,
            /\bManual\s+Tester\b/i
        ],
        [RoleType.QA_GENERAL]: [
            /\bQA\s+Engineer\b/i,
            /\bQuality\s+Assurance\s+Engineer\b/i,
            /\bQA\s+Tester\b/i
        ],
        [RoleType.QA_LEAD]: [
            /\bLead\s+QA\s*(?:Engineer|Automation)?\b/i,
            /\bQA\s+Lead\b/i,
            /\bQA\s+Team\s+Lead\b/i
        ],
        [RoleType.QA_SENIOR]: [
            /\bSenior\s+QA\s*(?:Engineer|Automation|Manual)?\b/i,
            /\bSr\.?\s+QA\s+Engineer\b/i
        ],
        [RoleType.QA_FULLSTACK]: [
            /\bFullstack\s+QA\s+Engineer\b/i,
            /\bQA\s+Engineer\s+Fullstack\b/i,
            /\bFull\s+Stack\s+QA\b/i
        ],
        [RoleType.QA_MOBILE]: [
            /\bMobile\s+(?:App\s+)?(?:Test\s+)?(?:Automation\s+)?(?:QA\s+)?(?:Engineer|Tester)\b/i,
            /\bMobile\s+QA\s*(?:Engineer|Tester)\b/i
        ],
        [RoleType.SDET]: [
            /\bSDET\b/i,
            /\bSoftware\s+Development\s+Engineer\s+in\s+Test\b/i
        ],
        [RoleType.TEST_ENGINEER]: [
            /\bTest\s+Engineer\b/i,
            /\bTesting\s+Engineer\b/i,
            /\bSoftware\s+Test\s+Engineer\b/i
        ]
    };

    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–æ–ª–∏
     */
    extractRole(
        input: string,
        config: RoleExtractionConfig = {}
    ): RoleExtractionResult | null {

        const targetRoleTypes = config.expectedRoleTypes || this.defaultRoleTypes;
        const debug = config.debug || false;

        if (debug) console.log(`üéØ Looking for role types: ${targetRoleTypes.join(', ')}`);

        // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö —Ç–∏–ø–æ–≤ —Ä–æ–ª–µ–π
        const candidates = this.findCandidates(input, targetRoleTypes, debug);

        if (candidates.length === 0) {
            if (debug) console.log('‚ùå No candidates found');
            return null;
        }

        // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        const best = this.selectBestCandidate(candidates, debug);

        if (debug) console.log(`‚úÖ Selected: ${best.role} (${best.roleType})`);

        return best;
    }

    /**
     * –ò—â–µ–º –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö —Ç–∏–ø–æ–≤ —Ä–æ–ª–µ–π
     */
    private findCandidates(
        input: string,
        targetRoleTypes: RoleType[],
        debug: boolean
    ): RoleExtractionResult[] {
        const candidates: RoleExtractionResult[] = [];

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ç–∏–ø–∞ —Ä–æ–ª–∏
        for (const roleType of targetRoleTypes) {
            const patterns = this.rolePatterns[roleType];
            const possibleNames = this.roleTypeMapping[roleType];

            // 1. –ò—â–µ–º –ø–æ —Ç–æ—á–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            for (const pattern of patterns) {
                const matches = this.findByPattern(input, pattern, roleType, debug);
                candidates.push(...matches);
            }

            // 2. –ò—â–µ–º –ø–æ —Ç–æ—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
            for (const name of possibleNames) {
                const matches = this.findByExactName(input, name, roleType, debug);
                candidates.push(...matches);
            }
        }

        return candidates;
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
     */
    private findByPattern(
        input: string,
        pattern: RegExp,
        roleType: RoleType,
        debug: boolean
    ): RoleExtractionResult[] {
        const matches = input.match(new RegExp(pattern.source, 'gi'));
        if (!matches) return [];

        return matches.map(match => {
            const normalized = this.normalizeRoleName(match, roleType);

            if (debug) console.log(`üîç Pattern match: "${match}" ‚Üí "${normalized}"`);

            return {
                role: normalized,
                roleType,
                confidence: 0.9,
                source: `pattern: ${match}`,
                method: 'pattern'
            };
        });
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
     */
    private findByExactName(
        input: string,
        name: string,
        roleType: RoleType,
        debug: boolean
    ): RoleExtractionResult[] {
        const regex = new RegExp(`\\b${name.replace(/\s+/g, '\\s+')}\\b`, 'gi');
        const matches = input.match(regex);
        if (!matches) return [];

        return matches.map(match => {
            if (debug) console.log(`üéØ Exact match: "${match}" ‚Üí "${name}"`);

            return {
                role: name,
                roleType,
                confidence: 0.95,
                source: `exact: ${match}`,
                method: 'exact'
            };
        });
    }

    /**
     * –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
     */
    private selectBestCandidate(
        candidates: RoleExtractionResult[],
        debug: boolean
    ): RoleExtractionResult {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ confidence, –∑–∞—Ç–µ–º –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç–∏ (–¥–ª–∏–Ω–µ —Ä–æ–ª–∏)
        const sorted = candidates.sort((a, b) => {
            if (b.confidence !== a.confidence) return b.confidence - a.confidence;
            return b.role.length - a.role.length;
        });

        if (debug) {
            console.log('üìä All candidates:');
            sorted.forEach((c, i) =>
                console.log(`  ${i+1}. ${c.role} (${c.confidence}, ${c.roleType})`)
            );
        }

        return sorted[0];
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏
     */
    private normalizeRoleName(rawRole: string, roleType: RoleType): string {
        // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        const mainName = this.roleTypeMapping[roleType][0];

        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (Senior, Lead, etc.)
        const modifiers = this.extractModifiers(rawRole);

        if (modifiers.length > 0) {
            return `${modifiers.join(' ')} ${mainName}`;
        }

        return mainName;
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É—Ä–æ–≤–Ω—è (Senior, Lead, etc.)
     */
    private extractModifiers(role: string): string[] {
        const modifiers = [];

        if (/\bSenior\b/i.test(role)) modifiers.push('Senior');
        if (/\bLead\b/i.test(role)) modifiers.push('Lead');
        if (/\bJunior\b/i.test(role)) modifiers.push('Junior');
        if (/\bMiddle\b/i.test(role)) modifiers.push('Middle');

        return modifiers;
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è —Ç–∏–ø–∞
     */
    getPossibleRolesForType(roleType: RoleType): string[] {
        return this.roleTypeMapping[roleType];
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞: –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —Ä–æ–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     */
    getRoleTypeByName(roleName: string): RoleType | null {
        for (const [type, names] of Object.entries(this.roleTypeMapping)) {
            if (names.some(name =>
                name.toLowerCase() === roleName.toLowerCase()
            )) {
                return type as RoleType;
            }
        }
        return null;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏ —ç–Ω—É–º—ã
export { RoleType, RoleExtractionConfig, RoleExtractionResult };
