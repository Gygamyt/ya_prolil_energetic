// scripts/slice-requests.ts

import * as fs from 'fs/promises';
import * as path from 'path';
import mammoth from 'mammoth';
// --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
import { fileURLToPath } from 'url';

// ‚Üì‚Üì‚Üì –í–û–¢ –≠–¢–ò 2 –°–¢–†–û–ö–ò –†–ï–®–ê–Æ–¢ –ü–†–û–ë–õ–ï–ú–£ ‚Üì‚Üì‚Üì
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
// --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---


// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç) ---
const INPUT_FILE_PATH = path.resolve(__dirname, '../data/all-requests.docx');
const OUTPUT_DIR = path.resolve(__dirname, '../data/requests-tmp');
const REQUEST_SPLIT_PATTERN = /^(CV - .*[\r\n]+https:\/\/innowisegroup2\.my\.salesforce\.com\/.*)/m;


/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
 */
async function main() {
    console.log(`–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Ä–µ–∑–∫—É —Ñ–∞–π–ª–∞: ${INPUT_FILE_PATH}`);

    try {
        // 1. –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
        await fs.rm(OUTPUT_DIR, { recursive: true, force: true });
        await fs.mkdir(OUTPUT_DIR, { recursive: true });
        console.log(`–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∞: ${OUTPUT_DIR}`);

        // 2. –ß–∏—Ç–∞–µ–º .docx —Ñ–∞–π–ª
        const { value: rawText } = await mammoth.extractRawText({ path: INPUT_FILE_PATH });
        if (!rawText) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ DOCX —Ñ–∞–π–ª–∞.');
        }
        console.log(`–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω, –≤—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: ${rawText.length}`);

        // 3. –†–∞–∑–±–∏–≤–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏
        const parts = rawText.split(REQUEST_SPLIT_PATTERN);

        const requests: string[] = [];
        for (let i = 1; i < parts.length; i += 2) {
            const header = parts[i];
            const body = parts[i + 1] || '';
            if (header.trim()) {
                requests.push((header + body).trim());
            }
        }

        if (requests.length === 0) {
            console.warn('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å.');
            return;
        }
        console.log(`–ù–∞–π–¥–µ–Ω–æ –∏ –Ω–∞—Ä–µ–∑–∞–Ω–æ –∑–∞—è–≤–æ–∫: ${requests.length}`);

        // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π .txt —Ñ–∞–π–ª
        for (let i = 0; i < requests.length; i++) {
            const requestContent = requests[i];
            const outputFilePath = path.join(OUTPUT_DIR, `request-${i + 1}.txt`);
            await fs.writeFile(outputFilePath, requestContent, 'utf-8');
        }

        console.log(`\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${requests.length} –∑–∞—è–≤–æ–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${OUTPUT_DIR}`);

    } catch (error) {
        console.error('\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:');
        console.error(error);
        process.exit(1);
    }
}

main();

