// scripts/process-requests.ts

import * as fs from 'fs/promises';
import * as path from 'path';
import { manager } from '../nlp/nlp-manager';
import { fileURLToPath } from 'url';
import { PrimaryRequirements, PrimaryRequirementsNLPExtractor } from "../extractors";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const INPUT_DIR = path.resolve(__dirname, '../data/requests-tmp');
const OUTPUT_JSON_PATH = path.resolve(__dirname, '../data/processing-results.json');
const OUTPUT_TEXTS_DIR = path.resolve(__dirname, '../data/processed-texts');

const FIELD_14_PATTERN = /14\.\s*–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É([\s\S]*?)(?=\n\d+\.\s*|$)/;

interface ProcessedResult {
    sourceFile: string;
    status: 'success' | 'no_entities_found' | 'error';
    rawText: string | null;
    data: PrimaryRequirements | null;
    error?: string;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
 */
async function main() {
    // ‚Üì‚Üì‚Üì –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ó–ê–ü–£–°–ö–ê–ï–ú –¢–ê–ô–ú–ï–† ‚Üì‚Üì‚Üì
    const startTime = process.hrtime();
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞—è–≤–æ–∫...');

    const allResults: ProcessedResult[] = [];

    try {
        // ... (–æ—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏) ...
        await fs.rm(OUTPUT_JSON_PATH, { force: true });
        await fs.rm(OUTPUT_TEXTS_DIR, { recursive: true, force: true });
        await fs.mkdir(OUTPUT_TEXTS_DIR, { recursive: true });
        console.log(`–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—á–∏—â–µ–Ω—ã –∏ —Å–æ–∑–¥–∞–Ω—ã.`);

        console.log('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ NLP-–º–æ–¥–µ–ª–∏...');
        await manager.train();
        console.log('–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞.');

        const extractor = new PrimaryRequirementsNLPExtractor();
        const files = await fs.readdir(INPUT_DIR);
        const requestFiles = files.filter(f => f.endsWith('.txt'));

        if (requestFiles.length === 0) {
            console.warn(`–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${INPUT_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ .txt —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);
            return;
        }
        console.log(`–ù–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${requestFiles.length} —Ñ–∞–π–ª–æ–≤.`);

        // ... (—Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤) ...
        for (const fileName of requestFiles) {
            const filePath = path.join(INPUT_DIR, fileName);
            console.log(`> –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${fileName}`);

            const fileContent = await fs.readFile(filePath, 'utf-8');
            const match = fileContent.match(FIELD_14_PATTERN);
            const rawField14Text = match ? match[1] : null;

            if (!rawField14Text) {
                console.log(`  -> –ü–æ–ª–µ 14 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ñ–∞–π–ª –ø—Ä–æ–ø—É—â–µ–Ω.`);
                continue;
            }

            const outputTextPath = path.join(OUTPUT_TEXTS_DIR, fileName);
            await fs.writeFile(outputTextPath, rawField14Text, 'utf-8');

            const textToProcess = rawField14Text.trim();

            try {
                const extractionResult = await extractor.extract(textToProcess);
                const status = extractionResult.value ? 'success' : 'no_entities_found';
                allResults.push({
                    sourceFile: fileName,
                    status,
                    rawText: rawField14Text,
                    data: extractionResult.value as PrimaryRequirements,
                });
            } catch (e) {
                allResults.push({
                    sourceFile: fileName,
                    status: 'error',
                    rawText: rawField14Text,
                    data: null,
                    error: e instanceof Error ? e.message : String(e),
                });
            }
        }

        await fs.writeFile(OUTPUT_JSON_PATH, JSON.stringify(allResults, null, 2), 'utf-8');

        // ‚Üì‚Üì‚Üì –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –¢–ê–ô–ú–ï–† –ò –°–ß–ò–¢–ê–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ ‚Üì‚Üì‚Üì
        const elapsed = process.hrtime(startTime);
        const elapsedSeconds = elapsed[0] + elapsed[1] / 1e9;
        const processedCount = allResults.length;
        const averageTime = processedCount > 0 ? elapsedSeconds / processedCount : 0;

        console.log(`\nüéâ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
        console.log(`- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–ª–µ–º 14: ${processedCount}`);
        console.log(`- –ò—Ç–æ–≥–æ–≤—ã–π JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${OUTPUT_JSON_PATH}`);
        console.log(`- –¢–µ–∫—Å—Ç—ã –ø–æ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${OUTPUT_TEXTS_DIR}`);
        console.log('---');
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
        console.log(`- –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${elapsedSeconds.toFixed(2)} —Å–µ–∫.`);
        console.log(`- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ñ–∞–π–ª: ${averageTime.toFixed(3)} —Å–µ–∫.`);

    } catch (error) {
        console.error('\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:');
        console.error(error);
        process.exit(1);
    }
}

main();
