// scripts/analyze-results.ts

import * as fs from 'fs/promises';
import * as path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const INPUT_FILE_PATH = path.resolve(__dirname, '../data/processing-results.json');
const OUTPUT_FILE_PATH = path.resolve(__dirname, '../data/summary_stats.json');

// --- –¢–∏–ø—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ ---
interface ProcessedResult {
    sourceFile: string;
    status: 'success' | 'no_entities_found' | 'error';
    data: {
        technologies: string[];
        platforms: string[];
        skills: string[];
        domains: string[];
        roles: string[];
    } | null;
}

interface StatItem {
    count: number;
    percentage: number;
}

interface Summary {
    totalProcessedRequests: number;
    technologies: Record<string, StatItem>;
    platforms: Record<string, StatItem>;
    skills: Record<string, StatItem>;
    domains: Record<string, StatItem>;
    roles: Record<string, StatItem>;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
 */
async function main() {
    console.log(`–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: ${INPUT_FILE_PATH}`);

    try {
        // 1. –ß–∏—Ç–∞–µ–º JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const fileContent = await fs.readFile(INPUT_FILE_PATH, 'utf-8');
        const results: ProcessedResult[] = JSON.parse(fileContent);

        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        const counters = {
            technologies: new Map<string, number>(),
            platforms: new Map<string, number>(),
            skills: new Map<string, number>(),
            domains: new Map<string, number>(),
            roles: new Map<string, number>(),
        };

        // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞—è–≤–∫–∏, –≥–¥–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å—É—â–Ω–æ—Å—Ç–∏
        const validEntries = results.filter(r => r.status === 'success' && r.data);
        const totalProcessedCount = validEntries.length;

        if (totalProcessedCount === 0) {
            console.warn('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.');
            return;
        }

        // 3. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞—è–≤–∫–∞–º –∏ —Å—á–∏—Ç–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
        for (const entry of validEntries) {
            if (entry.data) {
                for (const key in counters) {
                    const prop = key as keyof typeof counters;
                    const items = entry.data[prop] || [];
                    for (const item of items) {
                        counters[prop].set(item, (counters[prop].get(item) || 0) + 1);
                    }
                }
            }
        }

        // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        const summary: Summary = {
            totalProcessedRequests: totalProcessedCount,
            technologies: {}, platforms: {}, skills: {}, domains: {}, roles: {},
        };

        for (const key in counters) {
            const prop = key as keyof typeof counters;
            const sortedEntries = [...counters[prop].entries()].sort((a, b) => b[1] - a[1]);

            for (const [name, count] of sortedEntries) {
                summary[prop][name] = {
                    count,
                    percentage: parseFloat(((count / totalProcessedCount) * 100).toFixed(2)),
                };
            }
        }

        // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–æ–≤—ã–π JSON-—Ñ–∞–π–ª
        await fs.writeFile(OUTPUT_FILE_PATH, JSON.stringify(summary, null, 2), 'utf-8');

        console.log(`\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
        console.log(`- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞—è–≤–æ–∫: ${totalProcessedCount}`);
        console.log(`- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: ${OUTPUT_FILE_PATH}`);

    } catch (error) {
        console.error('\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:');
        console.error(error);
        process.exit(1);
    }
}

main();
