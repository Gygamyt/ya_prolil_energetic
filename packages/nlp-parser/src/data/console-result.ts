import * as fs from 'fs/promises';
import { dirname, resolve } from 'path';
import { fileURLToPath } from 'url';

interface TechStats {
    count: number;
    percentage: number;
}

interface StatsData {
    totalProcessedRequests: number;
    technologies: Record<string, TechStats>;
}

const MAX_TECHNOLOGIES_TO_SHOW = 20;

const CHART_CONFIG = {
    barTotalLength: 40,
    barFilledChar: '‚ñà',
    barEmptyChar: '‚ñë',
    techColumnWidth: 21,
    countColumnWidth: 6,
    percentColumnWidth: 5,
};

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.
 * @param data - –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
 * @param maxItems - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞.
 */
function displayStatsChart(data: StatsData, maxItems: number = MAX_TECHNOLOGIES_TO_SHOW): void {
    const { technologies, totalProcessedRequests } = data;

    const topTechnologies = Object.entries(technologies)
        .sort(([, statsA], [, statsB]) => statsB.percentage - statsA.percentage)
        .slice(0, maxItems);

    console.log(`\nüìä –¢–æ–ø-${maxItems} —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏–∑ ${totalProcessedRequests} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:\n`);
    const header = [
        '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è'.padEnd(CHART_CONFIG.techColumnWidth),
        '–ö–æ–ª-–≤–æ'.padStart(CHART_CONFIG.countColumnWidth),
        ' '.repeat(CHART_CONFIG.barTotalLength / 2 - 3) + '–ì—Ä–∞—Ñ–∏–∫' + ' '.repeat(CHART_CONFIG.barTotalLength / 2 - 3),
        '%'
    ].join(' | ');
    console.log(header);
    console.log('-'.repeat(header.length));
    for (const [tech, { count, percentage }] of topTechnologies) {
        const filledLength = Math.round((percentage / 100) * CHART_CONFIG.barTotalLength);
        const emptyLength = CHART_CONFIG.barTotalLength - filledLength;
        const bar = CHART_CONFIG.barFilledChar.repeat(filledLength) + CHART_CONFIG.barEmptyChar.repeat(emptyLength);

        const techCol = tech.padEnd(CHART_CONFIG.techColumnWidth);
        const countCol = count.toString().padStart(CHART_CONFIG.countColumnWidth);
        const percentCol = `${percentage.toFixed(2).padStart(CHART_CONFIG.percentColumnWidth)}%`;

        console.log(`${techCol} | ${countCol} | ${bar} | ${percentCol}`);
    }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
 * –ß–∏—Ç–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç JSON-—Ñ–∞–π–ª, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç—Ä–∏—Å–æ–≤–∫–∏.
 */
async function main() {
    try {
        const __filename = fileURLToPath(import.meta.url);
        const __dirname = dirname(__filename);

        const statsFilePath = resolve(__dirname, '../data/summary_stats.json');

        const rawData = await fs.readFile(statsFilePath, 'utf-8');
        const stats: StatsData = JSON.parse(rawData);

        displayStatsChart(stats);

    } catch (error) {
        console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        process.exit(1);
    }
}

main();
